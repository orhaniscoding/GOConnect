name: release-auto

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  bump-tag-and-release:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      # Simple semver bump: feat -> MINOR, fix/chore -> PATCH, feat! or BREAKING CHANGE -> MAJOR
      - name: Compute next version (Conventional Commits)
        id: semver
        shell: pwsh
        run: |
          git fetch --tags
          $lastTag = (git describe --tags --abbrev=0) 2>$null
          if (-not $lastTag) { $lastTag = "v0.1.0" }
          $logs = git log "$lastTag"..HEAD --pretty="%s%n%b"
          $bump = "patch"
          if ($logs -match "(?im)^\s*feat!:|BREAKING CHANGE:") { $bump = "major" }
          elseif ($logs -match "(?im)^\s*feat:") { $bump = "minor" }

          function Inc-Version($v,$part) {
            if ($v.StartsWith("v")) { $v = $v.Substring(1) }
            $maj,$min,$pat = $v.Split(".")
            switch ($part) {
              "major" { $maj=[int]$maj+1; $min=0; $pat=0 }
              "minor" { $min=[int]$min+1; $pat=0 }
              default { $pat=[int]$pat+1 }
            }
            return "v$maj.$min.$pat"
          }
          $newTag = Inc-Version $lastTag $bump
          "tag=$newTag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Create and push tag (to main repo)
        shell: pwsh
        run: |
          $tag = "${{ steps.semver.outputs.tag }}"
          git tag -a $tag -m "Release $tag"
          git push origin $tag

      - name: Build binaries (embed version)
        shell: pwsh
        run: |
          $ver="${{ steps.semver.outputs.tag }}"
          if ($ver.StartsWith("v")) { $ver = $ver.Substring(1) }
          go build -ldflags "-X goconnect/internal/version.Version=$ver" -o bin/goconnectcontroller.exe ./cmd/goconnectcontroller
          go build -ldflags "-X goconnect/internal/version.Version=$ver" -o bin/goconnect-service.exe ./cmd/goconnectservice

      - name: Prepare release artifacts (ZIP + SHA256)
        shell: pwsh
        run: |
          $ver="${{ steps.semver.outputs.tag }}"
          if ($ver.StartsWith("v")) { $ver = $ver.Substring(1) }
          powershell -NoProfile -ExecutionPolicy Bypass -File build\scripts\prepare-release.ps1 -Version $ver

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.semver.outputs.tag }}
          name: GOConnect ${{ steps.semver.outputs.tag }} — Windows Agent & Controller | Windows Aracı ve Denetleyici
          body: |
            # GOConnect ${{ steps.semver.outputs.tag }} — Windows Agent & Controller | Windows Aracı ve Denetleyici

            EN (English)
            - Prebuilt Windows binaries (Agent/Controller)
            - ZIP packages with install/uninstall scripts
            - Diagnostics (STUN/MTU) & self-updater
            - Structured JSON logging & optional /metrics
            - SQLite store (default), API auth + rate limit + validation

            TR (Türkçe)
            - Hazır Windows ikilileri (Agent/Controller)
            - Kurulum/kaldırma scriptleriyle ZIP paketleri
            - Tanılama (STUN/MTU) ve kendini güncelleme (updater)
            - JSON biçimli loglama ve isteğe bağlı /metrics
            - Varsayılan SQLite depolama, API yetkilendirme + kota + doğrulama
          draft: false
          prerelease: true
          files: |
            GOConnectAgentPackage-*.zip
            GOConnectAgentPackage-*.zip.sha256
            GOConnectControllerPackage-*.zip
            GOConnectControllerPackage-*.zip.sha256
            bin/goconnect-service.exe
            bin/goconnectcontroller.exe
